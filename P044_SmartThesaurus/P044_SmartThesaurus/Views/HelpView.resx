<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label15.Text" xml:space="preserve">
    <value>Un menu en bandeau est disponible à l'utilisateur. 
Celui-ci regroupe la majorité des fonctionnalités secondaires (hors indexation).

Ce menu est séparé en différentes sections regroupant plusieurs fonctionnalités :
</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>Il est possible d'ouvrir le résultat actuellement sélectionner directement dans l'explorateur de fichiers ou 
dans le naviguateur par défaut (dans le cas d'un lien).

Pour ce faire deux choix sont proposés :
   --&gt; Menu en bandeau
   --&gt; Double clic souris sur l'élément souhaité</value>
  </data>
  <data name="label18.Text" xml:space="preserve">
    <value>Afin d'exporter les résultats dans le fichier texte de son choix :
   --&gt; Menu en bandeau "Exporter"
   --&gt; Choisir le fichier de destination
Le fichier est alors créer et les résultats actuellement présent à l'écran sont ajoutés.
Attention, les fitres seront pris en compte au moment de l'exportation !</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>L'exportation permet à un utilisateur de stockés les résultats retournés dans un fichier texte séparéé 
par le charactère "|". Cela simplifie l'utilisation de ces données dans une application de tableur par exemple.</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Une page permettant la visualisation, la modification et la suppression d'un favoris
est disponible de deux manières :
   --&gt; Menu en bandeau
   --&gt; CTRL-E au clavier

Cette page contient la liste des favoris.
La modification / suppression d'un favori est accessible en sélectionnant le favori que l'on souhaite. 
Les deux boutons en bas de la fenêtre seront alors actifs.</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Cette fonctionnalité est accessible de différentes manières :
   --&gt; Menu en bandeau
   --&gt; Cliquer sur l'étoile
   --&gt; CTRL-A au clavier
Une fois la page ouverte un nom sera demandé.
Une description (facultative) peut aussi être ajoutée au favoris.
Attention, deux favoris ne peuvent avoir le même nom!</value>
  </data>
  <data name="label16.Text" xml:space="preserve">
    <value>Les résultats de recherche peuvent être filtrés par nom à l'aide d'une syntaxe concise 
   --&gt; Pour combiner les filtres, les lier avec le caractère ":" 
   --&gt; Pour définir un nouveau filtre, séparer les filtres avec le caractère " | "
Une fois cela fait il suffit d'appliquer les filtres avec le bouton "Rechercher".
Les résultats filtrés apparaisent alors dans la liste prévue à cet effet.

Pour retirer les filtres et ainsi retrouver ses résultats au complet, le bouton rouge "Annuler" est disponible.</value>
  </data>
</root>